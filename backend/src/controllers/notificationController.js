import Notification from "../models/Notification.js";
import User from "../models/User.js";

// üü¢ L·∫•y t·∫•t c·∫£ th√¥ng b√°o c·ªßa m·ªôt User
export const getUserNotifications = async (req, res) => {
    try {
        const { userId } = req.params;
        const notifications = await Notification.find({
            $or: [
                { user_id: userId }, // Th√¥ng b√°o ri√™ng c·ªßa user
                { user_id: "" },     // Th√¥ng b√°o chung
                { user_id: null }    // N·∫øu c√≥ th√¥ng b√°o null user_id
            ]
        }).sort({ createdAt: -1 });
        console.log(notifications);
        res.status(200).json(notifications);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng b√°o", error });
    }
};

// üü¢ L·∫•y t·∫•t c·∫£ th√¥ng b√°o (Admin ho·∫∑c h·ªá th·ªëng)
export const getAllNotifications = async (req, res) => {
    try {
        const notifications = await Notification.find().sort({ createdAt: -1 });
        res.status(200).json(notifications);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y t·∫•t c·∫£ th√¥ng b√°o", error });
    }
};

// üü¢ T·∫°o m·ªôt th√¥ng b√°o m·ªõi
export const createNotification = async (req, res) => {
    try {
        const { user_id, type, title, message, metadata } = req.body;

        if (!title || !message) {
            return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
        }

        const newNotification = new Notification({
            user_id: user_id, // N·∫øu user_id r·ªóng, ƒë·ªÉ null (G·ª≠i cho t·∫•t c·∫£)
            type: type || "general",
            title,
            message,
            metadata: metadata || {},
        });

        await newNotification.save();
        res.status(201).json({ message: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c t·∫°o!", notification: newNotification });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi t·∫°o th√¥ng b√°o", error });
    }
};

// üü¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ƒë·ªçc
export const markNotificationAsRead = async (req, res) => {
    try {
        const { id } = req.params;
        const notification = await Notification.findById(id);

        if (!notification) {
            return res.status(404).json({ message: "Th√¥ng b√°o kh√¥ng t·ªìn t·∫°i!" });
        }

        notification.is_read = true;
        await notification.save();
        res.status(200).json({ message: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc!", notification });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o", error });
    }
};

// üü¢ X√≥a m·ªôt th√¥ng b√°o
export const deleteNotification = async (req, res) => {
    try {
        const { id } = req.params;
        const notification = await Notification.findById(id);

        if (!notification) {
            return res.status(404).json({ message: "Th√¥ng b√°o kh√¥ng t·ªìn t·∫°i!" });
        }

        await notification.deleteOne();
        res.status(200).json({ message: "Th√¥ng b√°o ƒë√£ b·ªã x√≥a!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi x√≥a th√¥ng b√°o", error });
    }
};

// üü¢ G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng
export const sendNotificationToAllUsers = async (req, res) => {
    try {
        const { type, title, message, metadata } = req.body;

        if (!title || !message) {
            return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ti√™u ƒë·ªÅ v√† n·ªôi dung th√¥ng b√°o!" });
        }

        const users = await User.find({}, "_id");
        const notifications = users.map(user => ({
            user_id: user._id,
            type,
            title,
            message,
            metadata
        }));

        await Notification.insertMany(notifications);
        res.status(201).json({ message: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng!" });
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi g·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ ng∆∞·ªùi d√πng", error });
    }
};
